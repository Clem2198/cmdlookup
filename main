package com.company;

import java.io.BufferedWriter;
import java.io.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Arrays;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

import java.net.URL;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

public class Main {


    public static void main(String[] args) {

        Main main = new Main();

        final char UPDOWN_CODE = 'R';
        final char URL_CODE = 'U';
        final char SSL_CODE = 'S';
        final char GEO_CODE = 'G';
        final char EXIT_CODE = 'E';
        final char HELP_CODE = '?';
        char userAction;
        String userAction1;
        final String PROMPT_ACTION = "'U'rl Checker, Check if website is 'R'unning, Check 'S'SL Certificate, Find 'G'eolocation of website, " +
                "E'xit   ";
        final String URL_ACTION = "Please enter the url you want to check: ";
        userAction = getAction(PROMPT_ACTION);
        userAction1 = getAction1(URL_ACTION);



        while (userAction != EXIT_CODE) {
            switch (userAction) {
                case URL_CODE:
                    String userAction12 = String.valueOf(userAction1);


                    String urlName = "https";


                    String string = userAction12;
                    String keyword = "https";

                    if (userAction12.contains("https")) {
                        System.out.println("The website passes our test as it includes https within the url");
                        break;
                    } else if (userAction12.contains("http")) {
                        System.out.println("WARNING!!!! This url does not include https within its protocols. Proceed with caution.");
                        break;
                    } else {
                        System.out.println("The url provided does not include the protocol identifier (http or https)");
                        userAction1 = getAction1(URL_ACTION);
                    }

                    break;


                case UPDOWN_CODE:
                    String s = null;
                    try {

                        // run the Unix "ps -ef" command
                        // using the Runtime exec method:
                        System.out.println("Please only type the url without the protocol identifier (http or https)");
                        Process p = Runtime.getRuntime().exec("ping " + userAction1);

                        BufferedReader stdInput = new BufferedReader(new
                                InputStreamReader(p.getInputStream()));

                        BufferedReader stdError = new BufferedReader(new
                                InputStreamReader(p.getErrorStream()));

                        // read the output from the command
                        System.out.println("Here is the standard output of the command:\n");
                        while ((s = stdInput.readLine()) != null) {
                            String s1 = s;
                            if (s1.contains("0%")) {
                                System.out.println("The website is running");
                                break;
                            } else if (s1.contains("25%")) {
                                System.out.println("The website is running, but your connecion is not fully activated");
                                break;
                            } else {
                                System.out.println("No connection");
                            }

                        }

                        System.exit(0);

                    } catch (IOException e) {
                        System.out.println("exception happened - here's what I know: ");
                        e.printStackTrace();
                        System.exit(-1);
                    }
                case GEO_CODE:
                    s = null;
                    try {

                        // run the Unix "ps -ef" command
                        // using the Runtime exec method:
                        Process p = Runtime.getRuntime().exec("curl ipinfo.io" + userAction1);

                        BufferedReader stdInput = new BufferedReader(new
                                InputStreamReader(p.getInputStream()));

                        BufferedReader stdError = new BufferedReader(new
                                InputStreamReader(p.getErrorStream()));

                        // read the output from the command
                        System.out.println("Here is the standard output of the command:\n");
                        while ((s = stdInput.readLine()) != null) {
                            System.out.println(s);
                        }
                        System.exit(0);

                    } catch (IOException e) {
                        System.out.println("exception happened - here's what I know: ");
                        e.printStackTrace();
                        System.exit(-1);
                    }


                case SSL_CODE:
                    SSLTest methodCalling = new SSLTest();
                    System.out.println(methodCalling);



            }

            }

            userAction = getAction(PROMPT_ACTION);
        }



    public static char getAction(String prompt) {
        Scanner scnr = new Scanner(System.in);
        String answer = "";
        System.out.println(prompt);
        answer = scnr.nextLine().toUpperCase() + " ";
        char firstChar = answer.charAt(0);
        return firstChar;
    }

    public static String getAction1 (String URL){
        Scanner scnr = new Scanner(System.in);
        String urlChecker = "";
        System.out.println(URL);
        urlChecker = scnr.nextLine().toLowerCase() + " ";
        return urlChecker;




    }


    }
class SSLTest{

    public static void  main(String [] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        Scanner custName = new Scanner(System.in);
        System.out.println("Please enter url://");
        String URL = sc.nextLine();
        String ht1 = ("https://www.");
        String fullLink = ht1+URL;
        // configure the SSLContext with a TrustManager
        SSLContext ctx = SSLContext.getInstance("TLS");
        ctx.init(new KeyManager[0], new TrustManager[] {new DefaultTrustManager()}, new SecureRandom());
        SSLContext.setDefault(ctx);

        URL url = new URL(fullLink);
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
        conn.setHostnameVerifier(new HostnameVerifier() {
            @Override
            public boolean verify(String arg0, SSLSession arg1) {
                return true;
            }
        });
        System.out.println(conn.getResponseCode());
        Certificate[] certs = conn.getServerCertificates();
        for (Certificate cert :certs){
            System.out.println(cert.getType());
            System.out.println(cert);
        }

        conn.disconnect();
    }

    private static class DefaultTrustManager implements X509TrustManager {

        @Override
        public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}

        @Override
        public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}

        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return null;
        }
    }
}


